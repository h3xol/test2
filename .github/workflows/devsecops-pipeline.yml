# .github/workflows/devsecops-pipeline.yml

name: Django DevSecOps Pipeline

on:
  push:
    branches: [main]
  pull_request:

env:
  SONAR_HOST_URL: http://localhost:9000

jobs:
  lint-and-typecheck:
    name: Lint & Type-Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install formatting & lint tools
        run: pip install black isort flake8 pylint mypy

      - name: Black & isort check
        run: |
          black --check .
          isort --check-only .

      - name: Flake8 lint
        run: flake8 .

      - name: Pylint
        run: pylint --errors-only .

      - name: Mypy type-check
        run: mypy .

  security-scan:
    name: Static Security Scans
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    defaults:
      run:
        working-directory: .
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install SAST & dependency tools
        run: pip install bandit semgrep safety

      - name: Bandit scan
        run: |
          mkdir -p reports
          bandit -r . -f json -o reports/bandit.json

      - name: Semgrep scan
        run: semgrep --config=p/ci --json --output reports/semgrep.json

      - name: Safety dependency scan
        run: safety check -r requirements.txt --json > reports/safety.json

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: reports/

  container-scan:
    name: Container Image Scan
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker image
        run: docker build -t myapp:${{ github.sha }} .

      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: myapp:${{ github.sha }}

  dast-scan:
    name: Dynamic App Security Test
    runs-on: ubuntu-latest
    needs: container-scan
    services:
      webapp:
        image: myapp:${{ github.sha }}
        ports:
          - 8000:8000
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install OWASP ZAP
        run: sudo snap install zaproxy --classic

      - name: Run ZAP full scan
        run: |
          zaproxy -daemon -port 8090 -host 0.0.0.0
          zap-full-scan.py -t http://localhost:8000 -r reports/zap-report.html

      - name: Upload ZAP report
        uses: actions/upload-artifact@v3
        with:
          name: zap-report
          path: reports/zap-report.html

  sonar-scan:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: dast-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Download SonarScanner
        run: |
          curl -sSL https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip \
            -o sonar-scanner.zip
          unzip -q sonar-scanner.zip
          mv sonar-scanner-4.8.0.2856-linux sonar-scanner

      - name: Make scanner executable
        run: chmod +x ./sonar-scanner/bin/sonar-scanner

      - name: Run SonarScanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./sonar-scanner/bin/sonar-scanner \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.projectKey=proiect-django \
            -Dsonar.sources=. \
            -Dsonar.externalIssuesReportPaths=reports/sonar-bandit.json,reports/sonar-semgrep.json,reports/sonar-safety.json \
            -X
